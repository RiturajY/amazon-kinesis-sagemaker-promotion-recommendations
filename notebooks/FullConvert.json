{"paragraphs":[{"text":"%md\n\n# Purpose\n\nThis notebook reads the raw Kasandr data set, \ndoes some basic transformations, and writes the merged\ndata set out to the model input folder for training.\n\nThe data set comes from: https://archive.ics.uci.edu/ml/datasets/KASANDR#\n\nCiting the research paper for this data set:\n\n    Sumit Sidana, Charlotte Laclau, Massih-Reza Amini, Gilles Vandelle, and Andre Bois-Crettez. 'KASANDR: A Large-Scale Dataset with Implicit Feedback for Recommendation', SIGIR 2017. ","user":"anonymous","dateUpdated":"2018-04-10T13:29:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Purpose</h1>\n<p>This notebook reads the raw Kasandr data set,\n<br  />does some basic transformations, and writes the merged\n<br  />data set out to the model input folder for training.</p>\n<p>The data set comes from: https://archive.ics.uci.edu/ml/datasets/KASANDR#</p>\n<p>Citing the research paper for this data set:</p>\n<pre><code>Sumit Sidana, Charlotte Laclau, Massih-Reza Amini, Gilles Vandelle, and Andre Bois-Crettez. 'KASANDR: A Large-Scale Dataset with Implicit Feedback for Recommendation', SIGIR 2017.\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1523366837926_910536131","id":"20180205-213628_1657252487","dateCreated":"2018-04-10T13:27:17+0000","dateStarted":"2018-04-10T13:29:53+0000","dateFinished":"2018-04-10T13:29:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17544"},{"text":"%md\n\n## Read raw data","dateUpdated":"2018-04-10T13:27:17+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Read raw data</h2>\n"}]},"apps":[],"jobName":"paragraph_1523366837930_908997136","id":"20180223-074449_951047754","dateCreated":"2018-04-10T13:27:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17545"},{"text":"%spark.pyspark\n\nfrom pyspark.sql.types import StructType, StringType, IntegerType\n\ndataprep_bucket = \"s3://promo-dataprep\"\nmodel_input_bucket = \"s3://promo-model-train-input\"\n\ninputSchema = StructType() \\\n  .add(\"userid\", StringType()) \\\n  .add(\"offerid\", StringType()) \\\n  .add(\"countrycode\", StringType()) \\\n  .add(\"category\", StringType()) \\\n  .add(\"merchant\", StringType()) \\\n  .add(\"date0\", StringType()) \\\n  .add(\"date1\", StringType()) \\\n  .add(\"rating\", StringType())\n\n# read input CSV files \n# the input files use a variable number of spaces as delimiters, which the normal csv reader does not support\n# Also, the header is not the same format\ntrainRddRaw = sc.textFile(\"{0}/data/train_de.csv\".format(dataprep_bucket))\ntrainRddHeader = trainRddRaw.first()\ntrainRdd = trainRddRaw.filter(lambda line: line != trainRddHeader).map(lambda x: x.split())","user":"anonymous","dateUpdated":"2018-04-11T14:39:12+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523366837930_908997136","id":"20180205-212332_188805043","dateCreated":"2018-04-10T13:27:17+0000","dateStarted":"2018-04-11T14:39:12+0000","dateFinished":"2018-04-11T14:39:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17546"},{"text":"%spark.pyspark\ntestRddRaw = sc.textFile(\"{0}/data/test_de.csv\".format(dataprep_bucket))\ntestRddHeader = testRddRaw.first()\ntestRdd = testRddRaw.filter(lambda line: line != testRddHeader).map(lambda x: x.split())","user":"anonymous","dateUpdated":"2018-04-11T14:39:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523399277126_-1567758832","id":"20180410-222757_1074736498","dateCreated":"2018-04-10T22:27:57+0000","dateStarted":"2018-04-11T14:39:16+0000","dateFinished":"2018-04-11T14:39:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17547"},{"text":"%spark.pyspark\ndfTrain = sqlContext.createDataFrame(trainRdd, inputSchema)","user":"anonymous","dateUpdated":"2018-04-11T14:39:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523368626298_-2097103505","id":"20180410-135706_1587086442","dateCreated":"2018-04-10T13:57:06+0000","dateStarted":"2018-04-11T14:39:19+0000","dateFinished":"2018-04-11T14:39:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17548"},{"text":"%spark.pyspark\n\ndfTrain.count()","user":"anonymous","dateUpdated":"2018-04-11T14:39:23+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"15844717\n"}]},"apps":[],"jobName":"paragraph_1523366837930_908997136","id":"20180205-213700_1785393761","dateCreated":"2018-04-10T13:27:17+0000","dateStarted":"2018-04-11T14:39:23+0000","dateFinished":"2018-04-11T14:40:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17549"},{"text":"%spark.pyspark\ndfTest = sqlContext.createDataFrame(testRdd, inputSchema)\ndfTest.count()","user":"anonymous","dateUpdated":"2018-04-11T14:39:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1919561\n"}]},"apps":[],"jobName":"paragraph_1523399324864_60959883","id":"20180410-222844_2090893597","dateCreated":"2018-04-10T22:28:44+0000","dateStarted":"2018-04-11T14:39:25+0000","dateFinished":"2018-04-11T14:40:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17550"},{"text":"%spark.pyspark\n\n# drop timestamp, rename rating to label, rename merchant to product\ndfTrainPruned = dfTrain.drop('date0') \\\n    .drop('date1') \\\n    .withColumnRenamed(\"merchant\", \"product\") \\\n    .withColumnRenamed(\"rating\", \"label\")\n\ndfTrainPruned.printSchema()","user":"anonymous","dateUpdated":"2018-04-11T14:39:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- userid: string (nullable = true)\n |-- offerid: string (nullable = true)\n |-- countrycode: string (nullable = true)\n |-- category: string (nullable = true)\n |-- product: string (nullable = true)\n |-- label: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1523366837930_908997136","id":"20180205-214839_336190962","dateCreated":"2018-04-10T13:27:17+0000","dateStarted":"2018-04-11T14:40:13+0000","dateFinished":"2018-04-11T14:40:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17551"},{"text":"%spark.pyspark\ndfTestPruned = dfTest.drop('date0') \\\n    .drop('date1') \\\n    .withColumnRenamed(\"merchant\", \"product\") \\\n    .withColumnRenamed(\"rating\", \"label\")\n\ndfTestPruned.printSchema()","user":"anonymous","dateUpdated":"2018-04-11T14:40:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- userid: string (nullable = true)\n |-- offerid: string (nullable = true)\n |-- countrycode: string (nullable = true)\n |-- category: string (nullable = true)\n |-- product: string (nullable = true)\n |-- label: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1523399372902_1846472259","id":"20180410-222932_782613720","dateCreated":"2018-04-10T22:29:32+0000","dateStarted":"2018-04-11T14:40:20+0000","dateFinished":"2018-04-11T14:40:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17552"},{"text":"%spark.pyspark\ndfMerged = dfTrainPruned.union(dfTestPruned)\ndfMerged.count()","user":"anonymous","dateUpdated":"2018-04-11T14:40:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"17764278\n"}]},"apps":[],"jobName":"paragraph_1523399172704_1594786826","id":"20180410-222612_1058668281","dateCreated":"2018-04-10T22:26:12+0000","dateStarted":"2018-04-11T14:40:20+0000","dateFinished":"2018-04-11T14:41:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17553"},{"text":"%spark.pyspark\n# We saw in the data exploration notebook, there are over 2 million individual offer IDs.  \n# Let's filter and include only the top 20 by count.\nfrom pyspark.sql.functions import desc\n\nofferCounts = dfMerged.groupBy('offerid').count().sort(desc(\"count\"))\ntopTwentyCounts = offerCounts.select(['offerid']).head(20)\ntopTwentyCountsRdd = sc.parallelize(topTwentyCounts)\ntopCounts = topTwentyCountsRdd.map(lambda x: x.offerid)\ndfTopTwenty = dfMerged.where(dfMerged.offerid.isin(topCounts.collect()))\ndfTopTwenty.count()","user":"anonymous","dateUpdated":"2018-04-11T14:42:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523457391076_1122957156","id":"20180411-143631_1546765790","dateCreated":"2018-04-11T14:36:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18322","dateFinished":"2018-04-11T14:44:03+0000","dateStarted":"2018-04-11T14:42:25+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1506271\n"}]}},{"text":"%spark.pyspark\n# save to s3\ndfTopTwenty.write \\\n  .format(\"parquet\") \\\n  .mode(\"overwrite\") \\\n  .option(\"compression\", \"gzip\") \\\n  .save(\"{0}/merged.parquet\".format(model_input_bucket)) ","user":"anonymous","dateUpdated":"2018-04-11T14:44:50+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523366837935_907073391","id":"20180206-003013_1099537604","dateCreated":"2018-04-10T13:27:17+0000","dateStarted":"2018-04-11T14:44:50+0000","dateFinished":"2018-04-11T14:46:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17554"},{"text":"%spark.pyspark\n","dateUpdated":"2018-04-10T13:27:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523366837935_907073391","id":"20180206-004914_1070873493","dateCreated":"2018-04-10T13:27:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17555"}],"name":"FullConvert","id":"2DDA8QZ34","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}