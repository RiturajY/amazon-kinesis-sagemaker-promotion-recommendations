{"paragraphs":[{"text":"%md\n# Load and convert data","dateUpdated":"2018-04-10T22:53:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Load and convert data</h1>\n"}]},"apps":[],"jobName":"paragraph_1523400819185_-1328775046","id":"20180228-175528_703236316","dateCreated":"2018-04-10T22:53:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:312"},{"text":"%spark.pyspark\n\nmodel_input_bucket = \"promo-model-train-input\"\nroleArn = 'arn:aws:iam::102165494304:role/service-role/AmazonSageMaker-ExecutionRole-20180105T085657'\nimage_uri = '102165494304.dkr.ecr.us-east-1.amazonaws.com/tffmpromo:latest'\n\ndfFull = spark.read.parquet(\"s3://{0}/merged.parquet\".format(model_input_bucket))\nprint(\"Loaded schema: {0}\".format(dfFull.dtypes))","user":"anonymous","dateUpdated":"2018-04-11T13:42:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Loaded schema: [('userid', 'string'), ('offerid', 'string'), ('countrycode', 'string'), ('category', 'string'), ('product', 'string'), ('label', 'string')]\n"}]},"apps":[],"jobName":"paragraph_1523400819185_-1328775046","id":"20180206-193712_537269050","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:37:39+0000","dateFinished":"2018-04-11T12:37:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:313"},{"text":"%spark.pyspark\n# one-hot encode the data\nfrom pyspark.ml.feature import OneHotEncoder, StringIndexer\n\n# start with user id\nstringIndexer_user = StringIndexer(inputCol=\"userid\", outputCol=\"UserIdx\", handleInvalid='keep')\nmodel_user = stringIndexer_user.fit(dfFull)\nindexed_user = model_user.transform(dfFull)\n\nencoder_user = OneHotEncoder(inputCol=\"UserIdx\", outputCol=\"UserVec\")\nencoded_user = encoder_user.transform(indexed_user)\n","user":"anonymous","dateUpdated":"2018-04-11T14:38:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523400819185_-1328775046","id":"20180206-194257_1658970184","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:54:04+0000","dateFinished":"2018-04-11T12:54:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:319"},{"text":"%spark.pyspark\n\n# now do item\nencoded_user.take(1)\nstringIndexer_item = StringIndexer(inputCol=\"product\", outputCol=\"ItemIdx\", handleInvalid='keep')\nmodel_item = stringIndexer_item.fit(encoded_user)\nindexed_item = model_item.transform(encoded_user)\n\nencoder_item = OneHotEncoder(inputCol=\"ItemIdx\", outputCol=\"ItemVec\")\nencoded_item = encoder_item.transform(indexed_item)\n\n","user":"anonymous","dateUpdated":"2018-04-11T12:54:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523426264896_-89035522","id":"20180411-055744_2138856326","dateCreated":"2018-04-11T05:57:44+0000","dateStarted":"2018-04-11T12:54:15+0000","dateFinished":"2018-04-11T12:54:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:320"},{"text":"%spark.pyspark\n# now do category\nencoded_item.take(1)\nstringIndexer_cat = StringIndexer(inputCol=\"category\", outputCol=\"CategoryCleanedIdx\", handleInvalid='keep')\nmodel_cat = stringIndexer_cat.fit(encoded_item)\nindexed_cat = model_cat.transform(encoded_item)\n\nencoder_cat = OneHotEncoder(inputCol=\"CategoryCleanedIdx\", outputCol=\"CategoryCleanedVec\")\nencoded_cat = encoder_cat.transform(indexed_cat)\n\n","user":"anonymous","dateUpdated":"2018-04-11T12:54:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523427400013_8712601","id":"20180411-061640_929318813","dateCreated":"2018-04-11T06:16:40+0000","dateStarted":"2018-04-11T12:54:27+0000","dateFinished":"2018-04-11T12:54:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:321"},{"text":"%spark.pyspark\n# now do offerid\nstringIndexer_offer = StringIndexer(inputCol=\"offerid\", outputCol=\"OfferIdx\", handleInvalid='keep')\nmodel_offer = stringIndexer_offer.fit(encoded_cat)\nindexed_offer = model_offer.transform(encoded_cat)\n\nencoder_offer = OneHotEncoder(inputCol=\"OfferIdx\", outputCol=\"OfferVec\")\nencoded_offer = encoder_offer.transform(indexed_offer)\n\n","user":"anonymous","dateUpdated":"2018-04-11T12:54:37+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523428351491_1457660513","id":"20180411-063231_265977754","dateCreated":"2018-04-11T06:32:31+0000","dateStarted":"2018-04-11T12:54:37+0000","dateFinished":"2018-04-11T12:54:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:322"},{"text":"%spark.pyspark\n# now do countrycode\nencoded_offer.take(1)\nstringIndexer_cc = StringIndexer(inputCol=\"countrycode\", outputCol=\"CcIdx\", handleInvalid='keep')\nmodel_cc = stringIndexer_cc.fit(encoded_offer)\nindexed_cc = model_cc.transform(encoded_offer)\n\nencoder_cc = OneHotEncoder(inputCol=\"CcIdx\", outputCol=\"CcVec\")\nencoded_cc = encoder_cc.transform(indexed_cc)\n\nprint(\"Encoded schema: {0}\".format(encoded_cc.dtypes))","user":"anonymous","dateUpdated":"2018-04-11T12:54:46+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Encoded schema: [('userid', 'string'), ('offerid', 'string'), ('countrycode', 'string'), ('category', 'string'), ('product', 'string'), ('label', 'string'), ('UserIdx', 'double'), ('UserVec', 'vector'), ('ItemIdx', 'double'), ('ItemVec', 'vector'), ('CategoryCleanedIdx', 'double'), ('CategoryCleanedVec', 'vector'), ('OfferIdx', 'double'), ('OfferVec', 'vector'), ('CcIdx', 'double'), ('CcVec', 'vector')]\n"}]},"apps":[],"jobName":"paragraph_1523428361927_435564931","id":"20180411-063241_1055706891","dateCreated":"2018-04-11T06:32:41+0000","dateStarted":"2018-04-11T12:54:46+0000","dateFinished":"2018-04-11T12:54:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:323"},{"text":"%spark.pyspark\n\n# drop unused columns\ndfEncoded = encoded_cc.drop('userid').drop('UserIdx') \\\n    .drop('product').drop('ItemIdx') \\\n    .drop('offerid').drop('OfferIdx') \\\n    .drop('countrycode').drop('CcIdx') \\\n    .drop('category').drop('CategoryCleanedIdx') \n    \nprint(\"Pruned schema: {0}\".format(dfEncoded.dtypes))","user":"anonymous","dateUpdated":"2018-04-11T12:55:28+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Pruned schema: [('label', 'string'), ('UserVec', 'vector'), ('ItemVec', 'vector'), ('CategoryCleanedVec', 'vector'), ('OfferVec', 'vector'), ('CcVec', 'vector')]\n"}]},"apps":[],"jobName":"paragraph_1523400819185_-1328775046","id":"20180206-194524_1206648926","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:55:28+0000","dateFinished":"2018-04-11T12:55:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:324"},{"text":"%spark.pyspark\n\nfrom pyspark.sql.types import DoubleType\n\n# convert this to a format suited for Sagemaker: The DataFrame consists of a column named \"label\" of Doubles, indicating the feature for each example, and a column named \"features\" of Vectors\ndfLabeled = dfEncoded.withColumn(\"dlabel\", dfEncoded[\"label\"].cast(DoubleType())).drop(\"label\")\ndfLabeled = dfLabeled.withColumnRenamed(\"dlabel\", \"label\")\nprint(\"Labeled schema: {0}\".format(dfLabeled.dtypes))\n","user":"anonymous","dateUpdated":"2018-04-11T12:55:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Labeled schema: [('UserVec', 'vector'), ('ItemVec', 'vector'), ('CategoryCleanedVec', 'vector'), ('OfferVec', 'vector'), ('CcVec', 'vector'), ('label', 'double')]\n"}]},"apps":[],"jobName":"paragraph_1523400819186_-1327620800","id":"20180206-195620_1727029578","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:55:47+0000","dateFinished":"2018-04-11T12:55:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:325"},{"text":"%spark.pyspark\ndfLabeled = dfLabeled.withColumnRenamed(\"UserVec\", \"userid\") \\\n    .withColumnRenamed(\"ItemVec\", \"product\") \\\n    .withColumnRenamed(\"OfferVec\", \"offerid\") \\\n    .withColumnRenamed(\"CcVec\", \"countrycode\") \\\n    .withColumnRenamed(\"CategoryCleanedVec\", \"category\") \nprint(\"Labeled schema: {0}\".format(dfLabeled.dtypes))","user":"anonymous","dateUpdated":"2018-04-11T12:55:57+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Labeled schema: [('userid', 'vector'), ('product', 'vector'), ('category', 'vector'), ('offerid', 'vector'), ('countrycode', 'vector'), ('label', 'double')]\n"}]},"apps":[],"jobName":"paragraph_1523400819186_-1327620800","id":"20180223-201213_105795799","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:55:57+0000","dateFinished":"2018-04-11T12:55:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:326"},{"text":"%spark.pyspark\nfrom pyspark.ml.feature import VectorAssembler\n\nignore = ['label']\nassembler = VectorAssembler(\n    inputCols=[x for x in dfLabeled.columns if x not in ignore],\n    outputCol='features')\n\ndfFeatures = assembler.transform(dfLabeled)\nprint(\"Feature schema: {0}\".format(dfFeatures.dtypes))","user":"anonymous","dateUpdated":"2018-04-11T12:56:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Feature schema: [('userid', 'vector'), ('product', 'vector'), ('category', 'vector'), ('offerid', 'vector'), ('countrycode', 'vector'), ('label', 'double'), ('features', 'vector')]\n"}]},"apps":[],"jobName":"paragraph_1523400819186_-1327620800","id":"20180206-200608_303874815","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:56:16+0000","dateFinished":"2018-04-11T12:56:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:327"},{"text":"%spark.pyspark\ndfReadyForModel = dfFeatures.drop('userid').drop('product').drop('category').drop('countrycode').drop('offerid')\ndfReadyForModel.take(1)","user":"anonymous","dateUpdated":"2018-04-11T12:56:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[Row(label=0.0, features=SparseVector(7338, {1058: 1.0, 7302: 1.0, 7315: 1.0, 7328: 1.0, 7337: 1.0}))]\n"}]},"apps":[],"jobName":"paragraph_1523400819186_-1327620800","id":"20180206-200805_955354217","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:56:26+0000","dateFinished":"2018-04-11T12:56:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:328"},{"text":"%spark.pyspark\ntrain_df, test_df = dfReadyForModel.randomSplit([0.8, 0.2])","user":"anonymous","dateUpdated":"2018-04-11T12:56:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523400819186_-1327620800","id":"20180213-055407_1753115745","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:56:47+0000","dateFinished":"2018-04-11T12:56:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:329"},{"text":"%spark.pyspark\nfrom pyspark.sql.types import StructType, StringType, IntegerType\n\nlookupSchema = StructType() \\\n  .add(\"name\", StringType()) \\\n  .add(\"idx\", IntegerType())\n  \n# save lookups\nimport json\nlookup = dfReadyForModel.schema[\"features\"].metadata[\"ml_attr\"][\"attrs\"]\nlookup_names = []\nfor colentry in lookup['binary']:\n    lookup_names.append((colentry['name'],colentry['idx']))\n\nlRdd = sc.parallelize(lookup_names)\ndfLookup = spark.createDataFrame(lRdd, lookupSchema)\ndfLookup.take(1)","user":"anonymous","dateUpdated":"2018-04-11T12:56:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[Row(name=u'userid_241565de8ae842718ea3359c64246c38dc5b5335841d404d2b044a44a7cd7d23', idx=0)]\n"}]},"apps":[],"jobName":"paragraph_1523400819186_-1327620800","id":"20180206-205015_129579462","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:56:56+0000","dateFinished":"2018-04-11T12:56:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:330"},{"text":"%spark.pyspark\ndfLookup.write.csv(\"s3://{0}/headers/headers.csv\".format(model_input_bucket), mode=\"overwrite\")","user":"anonymous","dateUpdated":"2018-04-11T12:57:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523400819187_-1328005549","id":"20180224-014039_1167220547","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:57:16+0000","dateFinished":"2018-04-11T12:57:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:331"},{"text":"%md\n# TFFM","dateUpdated":"2018-04-10T22:53:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>TFFM</h1>\n"}]},"apps":[],"jobName":"paragraph_1523400819187_-1328005549","id":"20180228-074319_83853467","dateCreated":"2018-04-10T22:53:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:332"},{"text":"%spark.pyspark\nfrom pyspark import SparkContext, SparkConf\nfrom sagemaker_pyspark import IAMRole, classpath_jars, SageMakerEstimator\nfrom sagemaker_pyspark.transformation.serializers.serializers import ProtobufRequestRowSerializer\nfrom sagemaker_pyspark.transformation.deserializers.deserializers import ProtobufResponseRowDeserializer\nfrom sagemaker_pyspark.transformation.deserializers.deserializers import LinearLearnerRegressorProtobufResponseRowDeserializer\nfrom pyspark.sql.types import StructType, ArrayType, DoubleType, StructField\nfrom sagemaker_pyspark.S3Resources import S3DataPath\n\nestimator = SageMakerEstimator(\n    trainingImage = image_uri,\n    modelImage = image_uri,\n    trainingInstanceType = \"ml.c4.8xlarge\",\n    trainingInstanceCount = 1,\n    endpointInstanceType = \"ml.m4.xlarge\",\n    endpointInitialInstanceCount = 1,\n    requestRowSerializer = ProtobufRequestRowSerializer(),\n    responseRowDeserializer = LinearLearnerRegressorProtobufResponseRowDeserializer(),\n    hyperParameters = {\"order\": \"3\", \"rank\": \"7\", \"epochs\": \"50\", \"header_file_bucket\": model_input_bucket, \"header_file_prefix\": \"headers/headers.csv\" },\n    trainingInstanceVolumeSizeInGB = 1024,\n    trainingSparkDataFormat='sagemaker',\n    sagemakerRole=IAMRole(roleArn)\n    )\n\n\n ","user":"anonymous","dateUpdated":"2018-04-11T12:57:34+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523400819187_-1328005549","id":"20180206-210806_839234284","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:57:34+0000","dateFinished":"2018-04-11T12:57:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:333"},{"text":"%spark.pyspark\nmodel = estimator.fit(train_df)","user":"anonymous","dateUpdated":"2018-04-11T12:57:38+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523400819187_-1328005549","id":"20180206-205146_83485697","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T12:57:38+0000","dateFinished":"2018-04-11T13:09:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:334"},{"text":"%spark.pyspark\nvalidation_df = model.transform(test_df)","user":"anonymous","dateUpdated":"2018-04-11T13:11:23+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523400819187_-1328005549","id":"20180228-040820_863761266","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T13:11:23+0000","dateFinished":"2018-04-11T13:11:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:335"},{"text":"%spark.pyspark\nfrom pyspark.sql.functions import col, round\nimport pyspark.sql.functions as F\nimport pyspark.sql.types as T\nfrom pyspark.mllib.evaluation import BinaryClassificationMetrics, MulticlassMetrics\n\n# apply threshold\ndef thresholdScore(x):\n    retval = 0.0\n    if x > 0.5:\n        retval = 1.0\n    return retval\n    \nthresholdScoreUdf = F.UserDefinedFunction(thresholdScore, T.FloatType())\n    \nvalidation_df_round = validation_df.withColumn('rscore', thresholdScoreUdf(validation_df.score)) \npredTffm = validation_df_round.select(['label','rscore'])\n\npredictionAndLabelsTffm = predTffm.rdd.map(lambda lp: (lp.rscore, lp.label))\nmetricsTffm = BinaryClassificationMetrics(predictionAndLabelsTffm)\nprint(\"Area under PR = %s\" % metricsTffm.areaUnderPR)\nprint(\"Area under ROC = %s\" % metricsTffm.areaUnderROC)\n\nmmetricsTffm = MulticlassMetrics(predictionAndLabelsTffm)\nprecisionTffm = mmetricsTffm.precision()\nrecallTffm = mmetricsTffm.recall()\nf1ScoreTffm = mmetricsTffm.fMeasure()\nprint(\"Summary Stats\")\nprint(\"Precision = %s\" % precisionTffm)\nprint(\"Recall = %s\" % recallTffm)\nprint(\"F1 Score = %s\" % f1ScoreTffm)\nprint(\"Weighted recall = %s\" % mmetricsTffm.weightedRecall)\nprint(\"Weighted precision = %s\" % mmetricsTffm.weightedPrecision)\nprint(\"Weighted F(1) Score = %s\" % mmetricsTffm.weightedFMeasure())\nprint(\"Weighted F(0.5) Score = %s\" % mmetricsTffm.weightedFMeasure(beta=0.5))\nprint(\"Weighted false positive rate = %s\" % mmetricsTffm.weightedFalsePositiveRate)","user":"anonymous","dateUpdated":"2018-04-11T13:13:21+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Area under PR = 0.99590689276\nArea under ROC = 0.998302612667\nSummary Stats\nPrecision = 0.999080742044\nRecall = 0.999080742044\nF1 Score = 0.999080742044\nWeighted recall = 0.999080742044\nWeighted precision = 0.999080765564\nWeighted F(1) Score = 0.99908075362\nWeighted F(0.5) Score = 0.999080760742\nWeighted false positive rate = 0.00247551671025\n"}]},"apps":[],"jobName":"paragraph_1523400819188_-1329929293","id":"20180228-075104_188197676","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T13:13:21+0000","dateFinished":"2018-04-11T13:14:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:336"},{"text":"%md\n# Sagemaker native FM","user":"anonymous","dateUpdated":"2018-04-11T13:02:01+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Sagemaker native FM</h1>\n"}]},"apps":[],"jobName":"paragraph_1523400819188_-1329929293","id":"20180228-074345_726844293","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T13:02:01+0000","dateFinished":"2018-04-11T13:02:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:337"},{"text":"%spark.pyspark\nfrom pyspark import SparkContext, SparkConf\nfrom sagemaker_pyspark import IAMRole, classpath_jars, SageMakerEstimator\nfrom sagemaker_pyspark.transformation.serializers.serializers import ProtobufRequestRowSerializer\nfrom sagemaker_pyspark.transformation.deserializers.deserializers import ProtobufResponseRowDeserializer\nfrom sagemaker_pyspark.transformation.deserializers.deserializers import LinearLearnerRegressorProtobufResponseRowDeserializer\nfrom pyspark.sql.types import StructType, ArrayType, DoubleType, StructField\nfrom sagemaker_pyspark.S3Resources import S3DataPath\n\nnumFeatures = train_df.first().features.size\n\nestimatorFM = SageMakerEstimator(\n    trainingImage = '382416733822.dkr.ecr.us-east-1.amazonaws.com/factorization-machines:latest',\n    modelImage = '382416733822.dkr.ecr.us-east-1.amazonaws.com/factorization-machines:latest',\n    trainingInstanceType = \"ml.c4.8xlarge\",\n    trainingInstanceCount = 1,\n    endpointInstanceType = \"ml.m4.xlarge\",\n    endpointInitialInstanceCount = 1,\n    requestRowSerializer = ProtobufRequestRowSerializer(),\n    responseRowDeserializer = LinearLearnerRegressorProtobufResponseRowDeserializer(),\n    hyperParameters = {\"predictor_type\": \"regressor\", \"feature_dim\": str(numFeatures), \"mini_batch_size\": \"1000\", \"num_factors\": \"64\", \"_speedometer_period\": \"10\", \"epochs\": \"100\" },\n    trainingInstanceVolumeSizeInGB = 1024,\n    trainingSparkDataFormat='sagemaker',\n    sagemakerRole=IAMRole(roleArn)\n\n    )\n    \nmodelFM = estimatorFM.fit(train_df)","user":"anonymous","dateUpdated":"2018-04-11T13:17:10+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523400819188_-1329929293","id":"20180226-222229_1554709163","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T13:17:10+0000","dateFinished":"2018-04-11T13:40:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:338"},{"text":"%spark.pyspark\nvalidation_df_fm = modelFM.transform(test_df)","user":"anonymous","dateUpdated":"2018-04-11T13:17:35+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523400819188_-1329929293","id":"20180207-171130_956850711","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T13:17:35+0000","dateFinished":"2018-04-11T13:40:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:339"},{"text":"%spark.pyspark\nvalidation_df_fm.take(1)","user":"anonymous","dateUpdated":"2018-04-11T13:17:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[Row(label=0.0, features=SparseVector(7338, {1: 1.0, 7303: 1.0, 7314: 1.0, 7317: 1.0, 7337: 1.0}), score=-0.46351730823516846)]\n"}]},"apps":[],"jobName":"paragraph_1523400819189_-1330314042","id":"20180213-035904_1309769397","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T13:40:56+0000","dateFinished":"2018-04-11T13:41:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:340"},{"text":"%spark.pyspark\n\nvalidation_df_fm_round = validation_df_fm.withColumn('rscore', thresholdScoreUdf(validation_df_fm.score)) \npredFm = validation_df_fm_round.select(['label','rscore'])\n\npredictionAndLabelsFm = predFm.rdd.map(lambda lp: (lp.rscore, lp.label))\nmetricsFm = BinaryClassificationMetrics(predictionAndLabelsFm)\nprint(\"Area under PR = %s\" % metricsFm.areaUnderPR)\nprint(\"Area under ROC = %s\" % metricsFm.areaUnderROC)\n\nmmetricsFm = MulticlassMetrics(predictionAndLabelsFm)\nprecisionFm = mmetricsFm.precision()\nrecallFm = mmetricsFm.recall()\nf1ScoreFm = mmetricsFm.fMeasure()\nprint(\"Summary Stats\")\nprint(\"Precision = %s\" % precisionFm)\nprint(\"Recall = %s\" % recallFm)\nprint(\"F1 Score = %s\" % f1ScoreFm)\nprint(\"Weighted recall = %s\" % mmetricsFm.weightedRecall)\nprint(\"Weighted precision = %s\" % mmetricsFm.weightedPrecision)\nprint(\"Weighted F(1) Score = %s\" % mmetricsFm.weightedFMeasure())\nprint(\"Weighted F(0.5) Score = %s\" % mmetricsFm.weightedFMeasure(beta=0.5))\nprint(\"Weighted false positive rate = %s\" % mmetricsFm.weightedFalsePositiveRate)","user":"anonymous","dateUpdated":"2018-04-11T13:18:14+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Area under PR = 0.631465238163\nArea under ROC = 0.916030967011\nSummary Stats\nPrecision = 0.908213586433\nRecall = 0.908213586433\nF1 Score = 0.908213586433\nWeighted recall = 0.908213586433\nWeighted precision = 0.931246485851\nWeighted F(1) Score = 0.914361401652\nWeighted F(0.5) Score = 0.923420778555\nWeighted false positive rate = 0.0761516524113\n"}]},"apps":[],"jobName":"paragraph_1523400819189_-1330314042","id":"20180213-050415_1037744523","dateCreated":"2018-04-10T22:53:39+0000","dateStarted":"2018-04-11T13:40:56+0000","dateFinished":"2018-04-11T13:42:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:341"},{"text":"%spark.pyspark\n","dateUpdated":"2018-04-10T22:53:39+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523400819190_-1329159795","id":"20180228-074812_556469530","dateCreated":"2018-04-10T22:53:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:342"}],"name":"FullTrain","id":"2DA2FN5W4","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}